#!/usr/bin/bash

SW_SYSFS=/sys/class/rossw
NIC_SYSFS=/sys/class/cxi
PORT_DIR_SYSFS=port

cmd=$(basename $0)
function usage {
        echo "$cmd ldev_num[:lgrp_num][:link_num] [option]"
        echo "  target:"
        echo "    ldev_num = link device number (0)"
        echo "    lgrp_num = link group number (0-63)"
        echo "    link_num = link number (0-3)"
        echo "  option:"
        echo "    state    = print state for the target"
        echo "    cable    = print cable info for the target"
        echo "    counters = print counters for a link target (requires #:#:#)"
        echo "    use_test = use the \"test_port\" directory"
        exit;
}

if [ "$#" -eq 1 ] ; then
        if [ $1 = "-h" ] ; then
                usage
        elif [ $1 = "--help" ] ; then
                usage
        fi
elif [ "$#" -eq 2 ] ; then
        case $2 in
                state )
                        option=state
                        ;;
                cable )
                        option=cable
                        ;;
                counters )
                        option=counters
                        ;;
                use_test )
                        option=use_test
                        PORT_DIR_SYSFS=test_port
                        ;;
                * )
                        usage
                        ;;
        esac
else
        usage
fi

target=(${1//:/ })

num_args=${#target[@]}

if [ "$num_args" -eq 1 ] ; then
        LDEV=${target[0]}
        LGRP=no
        LINK=no
elif [ "$num_args" -eq 2 ] ; then
        LDEV=${target[0]}
        LGRP=${target[1]}
        LINK=no
elif [ "$num_args" -eq 3 ] ; then
        LDEV=${target[0]}
        LGRP=${target[1]}
        LINK=${target[2]}
else
        usage
fi

if [ -e ${SW_SYSFS} ] ; then
        LDEV_PATH="${SW_SYSFS}/rossw${LDEV}"
        LGRP_PATH="${LDEV_PATH}/pgrp/${LGRP}"
        LINK_PATH="${LGRP_PATH}/${PORT_DIR_SYSFS}/${LINK}/link"
        MAC_PATH="${LGRP_PATH}/${PORT_DIR_SYSFS}/${LINK}/mac"
        LLR_PATH="${LGRP_PATH}/${PORT_DIR_SYSFS}/${LINK}/llr"
elif [ -e ${NIC_SYSFS} ] ; then
        LDEV_PATH="${NIC_SYSFS}/cxi${LDEV}/device/${PORT_DIR_SYSFS}/${LGRP}"
        LGRP_PATH="${LDEV_PATH}"
        LINK_PATH="${LGRP_PATH}/link"
        MAC_PATH="${LGRP_PATH}/mac"
        LLR_PATH="${LGRP_PATH}/llr"
else
        echo "nothing initialized"
        exit
fi

function print_ldev {
        if [ ! -e ${LDEV_PATH} ] ; then
                return
        fi

        local ver=$(cat ${LDEV_PATH}/sl_info/mod_ver)
        local hash=$(cat ${LDEV_PATH}/sl_info/mod_hash)

        echo "-------------------------------------------------------------------------------------------"
        printf "SL %-19s %68s\n" "${ver}" "hash: ${hash}"
        echo "--------+----------------------------------------------------------------------------------"
}

function print_jack_state {
        if [ ! -e ${LGRP_PATH} ] ; then
                return;
        fi

        local state=$(cat ${LGRP_PATH}/media/state)
        local jack_num=$(cat ${LGRP_PATH}/media/jack_num)
        local shift=$(cat ${LGRP_PATH}/media/cable_shift_state)
	local power=$(cat ${LGRP_PATH}/media/jack_power_state)

        printf "jack%03d    | state: ${state}, shift: ${shift}, power: ${power}\n" ${jack_num}
}

function print_link_state {
        if [ ! -e ${LINK_PATH} ] ; then
                return
        fi

        local state=$(cat ${LINK_PATH}/state)
        local speed=$(cat ${LINK_PATH}/speed)
        local time_to_link_up=$(cat ${LINK_PATH}/time_to_link_up_ms)

        printf "link%d      | state: ${state} ${speed}, time_to_link_up: ${time_to_link_up}ms\n" ${LINK}
}

function print_mac_state {
        if [ ! -e ${MAC_PATH} ] ; then
                return
        fi

        local state_tx=$(cat ${MAC_PATH}/tx_state)
        local state_rx=$(cat ${MAC_PATH}/rx_state)

        printf "mac%d       | state: tx ${state_tx}, rx ${state_rx}\n" ${LINK}
}

function print_llr_state {
        if [ ! -e ${LLR_PATH} ] ; then
                return
        fi

        local state=$(cat ${LLR_PATH}/state)

        printf "llr%d       | state: ${state}\n" ${LINK}
}

function print_counters {
        if [ ! -e ${LINK_PATH} ] ; then
                return
        fi

        local first=0;

        printf "counters   |"
        for counter in ${LINK_PATH}/counters/* ; do
                val=$(cat ${counter})
                if [ ${first} -eq 0 ] ; then
                        printf " %25s = ${val}\n" $(basename "${counter}")
                        first=1
                else
                        printf "           | %25s = ${val}\n" $(basename "${counter}")
                fi
        done
}

function print_jack {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        local jack_type=$(cat ${LGRP_PATH}/media/jack_type)
        local type=$(cat ${LGRP_PATH}/media/type)
        local vendor=$(cat ${LGRP_PATH}/media/vendor)
        local serial_num=$(cat ${LGRP_PATH}/media/serial_num)
        local hpe_part=$(cat ${LGRP_PATH}/media/hpe_part_num)
        local supported=$(cat ${LGRP_PATH}/media/supported)
        local furcation=$(cat ${LGRP_PATH}/media/furcation)
        local length=$(cat ${LGRP_PATH}/media/length_cm)
        local max_speed=$(cat ${LGRP_PATH}/media/max_speed)

        print_jack_state

        printf "           | cable: ${vendor} ${type} ${length}cm, type: ${jack_type}, part#: ${hpe_part}, serial#: ${serial_num}\n"
        printf "           | supported: ${supported}, furcation: ${furcation}\n"
        printf "           | speeds: "
        if [ -e ${LGRP_PATH}/media/speeds/cd50G ] ; then
                printf "cd50 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/bj100G ] ; then
                printf "bj100 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/cd100G ] ; then
                printf "cd100 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/bs200G ] ; then
                printf "bs200 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/ck100G ] ; then
                printf "ck100 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/ck200G ] ; then
                printf "ck200 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/ck400G ] ; then
                printf "ck400 "
        fi
        if [ -e ${LGRP_PATH}/media/speeds/ck800G ] ; then
                printf "ck800 "
        fi
        printf "\n"
        printf "           | max_speed: ${max_speed}\n"
}

function print_lgrp {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        local furcation=$(cat ${LGRP_PATH}/config/furcation)
        local tech_map=$(cat ${LGRP_PATH}/config/tech_map)
        local fec_map=$(cat ${LGRP_PATH}/config/fec_map)

        printf "lgrp%02d     | furcation: ${furcation}\n" ${LGRP}
        printf "           | tech_config: ${tech_map}\n"
        printf "           | fec_config : ${fec_map}\n"
}

function print_link {
        if [ ! -e ${LINK_PATH} ] ; then
                return
        fi

        local down_cause_map=$(cat ${LINK_PATH}/last_down_cause_map)
        local down_time=$(cat ${LINK_PATH}/last_down_time)
        local up_fail_cause_map=$(cat ${LINK_PATH}/last_up_fail_cause_map)
        local up_fail_time=$(cat ${LINK_PATH}/last_up_fail_time)
        local hpe_map=$(cat ${LINK_PATH}/config/hpe_map)
        local pause_map=$(cat ${LINK_PATH}/config/pause_map)
        local link_up_timeout=$(cat ${LINK_PATH}/config/link_up_timeout_ms)
        local link_up_tries_max=$(cat ${LINK_PATH}/config/link_up_tries_max)
        local autoneg=$(cat ${LINK_PATH}/config/autoneg)
        local caps_pause=$(cat ${LINK_PATH}/caps/pause_map)
        local caps_tech=$(cat ${LINK_PATH}/caps/tech_map)
        local caps_fec=$(cat ${LINK_PATH}/caps/fec_map)
        local caps_hpe=$(cat ${LINK_PATH}/caps/hpe_map)
        local loopback=$(cat ${LINK_PATH}/config/loopback)

        print_link_state

        printf "           | last_down_cause: [${down_time}] ${down_cause_map}\n"
        printf "           | up_fail_cause  : [${up_fail_time}] ${up_fail_cause_map}\n"
        printf "           | link_up_timeout: ${link_up_timeout}ms (max tries = ${link_up_tries_max})\n"
        printf "           | hpe_config     : ${hpe_map}\n"
        printf "           | pause_config   : ${pause_map}\n"
        printf "           | autoneg        : ${autoneg}\n"
        printf "           |      pause_caps: ${caps_pause}\n"
        printf "           |      tech_caps : ${caps_tech}\n"
        printf "           |      fec_caps  : ${caps_fec}\n"
        printf "           |      hpe_caps  : ${caps_hpe}\n"
	printf "           | loopback       : ${loopback}\n"
}

function print_mac {
        if [ ! -e ${MAC_PATH} ] ; then
                return
        fi

        print_mac_state
}

function print_llr {
        if [ ! -e ${LLR_PATH} ] ; then
                return
        fi

        local calc=$(cat ${LLR_PATH}/loop/calc_ns)
        local min=$(cat ${LLR_PATH}/loop/min_ns)
        local max=$(cat ${LLR_PATH}/loop/max_ns)
        local avg=$(cat ${LLR_PATH}/loop/average_ns)
        local mode=$(cat ${LLR_PATH}/config/mode)
        local down_bahavior=$(cat ${LLR_PATH}/config/link_down_behavior)
        local setup_timeout=$(cat ${LLR_PATH}/config/setup_timeout_ms)
        local start_timeout=$(cat ${LLR_PATH}/config/start_timeout_ms)
        local tries=$(cat ${LLR_PATH}/policies/continuous_tries)

        print_llr_state

        printf "           | loop_calc: ${calc}ns, loop_min: ${min}ns, loop_max: ${max}ns, loop_avg: ${avg}ns\n"
        printf "           | mode: ${mode}, link_down_bahavior: ${down_bahavior}\n"
        printf "           | setup_timeout: ${setup_timeout}ms, start_timeout: ${start_timeout}ms\n"
        printf "           | continuous_tries: ${tries}\n"
}

function print_serdes {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        local hw_ver=$(cat ${LGRP_PATH}/serdes/hw_version)
        local fw_ver=$(cat ${LGRP_PATH}/serdes/fw_version)

        printf "serdes     | hw: ${hw_ver}, fw: ${fw_ver}\n"
}

function print_col_state {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        printf "  state    |        tx,rx | "
        for lane in {0..3} ; do
                state_tx=$(cat ${LGRP_PATH}/serdes/lane/${lane}/state/tx)
                state_rx=$(cat ${LGRP_PATH}/serdes/lane/${lane}/state/rx)
                printf "%15s " "${state_tx},${state_rx}"
        done
        printf "\n"
}

function print_col_eye_high {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        printf "  eye high |    val,limit | "
        for lane in {0..3} ; do
                limit_high=$(cat ${LGRP_PATH}/serdes/lane/${lane}/eye/limit_high)
                value_up=$(cat ${LGRP_PATH}/serdes/lane/${lane}/eye/value_upper)
                printf "%15s " "${value_up},${limit_high}"
        done
        printf "\n"
}

function print_col_eye_low {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        printf "  eye low  |    val,limit | "
        for lane in {0..3} ; do
                limit_low=$(cat ${LGRP_PATH}/serdes/lane/${lane}/eye/limit_low)
                value_low=$(cat ${LGRP_PATH}/serdes/lane/${lane}/eye/value_lower)
                printf "%15s " "${value_low},${limit_low}"
        done
        printf "\n"
}

function print_col1 {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        local which=$1
        local str=$2

        printf " %12s | " ${str}
        for lane in {0..3} ; do
                state=$(cat ${LGRP_PATH}/serdes/lane/${lane}/${which})
                printf "%15s " $state
        done
        printf "\n"
}

function print_col {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        local which=$1
        local str=$2

        printf "           | %12s | " ${str}
        for lane in {0..3} ; do
                state=$(cat ${LGRP_PATH}/serdes/lane/${lane}/${which})
                printf " %14s " $state
        done
        printf "\n"
}

function print_fec {
        if [ ! -e ${LINK_PATH} ] ; then
                return
        fi

        local up_check_wait=$(cat ${LINK_PATH}/fec/up_check/check_wait_ms)
        local up_settle_wait=$(cat ${LINK_PATH}/fec/up_check/settle_wait_ms)
        local up_check_ccw_limit=$(cat ${LINK_PATH}/fec/up_check/ccw_limit)
        local up_check_ucw_limit=$(cat ${LINK_PATH}/fec/up_check/ucw_limit)
        local mon_period=$(cat ${LINK_PATH}/fec/monitor_check/period_ms)
        local mon_ccw_down_limit=$(cat ${LINK_PATH}/fec/monitor_check/ccw_down_limit)
        local mon_ccw_warn_limit=$(cat ${LINK_PATH}/fec/monitor_check/ccw_warn_limit)
        local mon_ucw_down_limit=$(cat ${LINK_PATH}/fec/monitor_check/ucw_down_limit)
        local mon_ucw_warn_limit=$(cat ${LINK_PATH}/fec/monitor_check/ucw_warn_limit)

        printf "fec        | up_check_wait: ${up_check_wait}ms, up_settle_wait: ${up_settle_wait}ms\n"
        printf "           | up_check_ccw_limit: ${up_check_ccw_limit}ms, up_check_ucw_limit: ${up_check_ucw_limit}ms\n"
        printf "           | mon_period: ${mon_period}ms\n"
        printf "           | mon_ccw_down_limit: ${mon_ccw_down_limit}, mon_ccw_warn_limit: ${mon_ccw_warn_limit}\n"
        printf "           | mon_ucw_down_limit: ${mon_ucw_down_limit}, mon_ucw_warn_limit: ${mon_ucw_warn_limit}\n"
}

function print_fec_current {
        if [ ! -e ${LINK_PATH} ] ; then
                return
        fi

        local ccw=$(cat ${LINK_PATH}/fec/current/ccw)
        local ucw=$(cat ${LINK_PATH}/fec/current/ucw)

        printf "           | current_ccw: ${ccw}, current_ucw: ${ucw}\n"
        count=$(cat ${LINK_PATH}/fec/current/tail/bin00)
        printf "           | current_bins: [00] ${count}\n"
        for bin in {1..9} ; do
                count=$(cat ${LINK_PATH}/fec/current/tail/bin0${bin})
                printf "           |               [0${bin}] ${count}\n"
        done
        for bin in {10..14} ; do
                count=$(cat ${LINK_PATH}/fec/current/tail/bin${bin})
                printf "           |               [${bin}] ${count}\n"
        done
        printf "           | current_fecls:         fecl0           fecl1           fecl2           fecl3\n"
        printf "           |            +----------------------------------------------------------------\n"
        for lane in {0..3} ; do
                printf "           | %10s | " "lane${lane}"
                for fecl in {0..3} ; do
                        fecl=$(cat ${LINK_PATH}/fec/current/lane/${lane}/fecl${fecl})
                        printf "%15s " ${fecl}
                done
                printf "\n"
        done
        printf "           |            +----------------------------------------------------------------\n"
}
function print_serdes_header {
        print_serdes
        printf "           | lanes:                   lane0           lane1           lane2           lane3\n"
        printf "           |              +----------------------------------------------------------------\n"
}

function print_serdes_footer {
        printf "           |              +----------------------------------------------------------------\n"
}

function print_lane_state {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        print_serdes_header
        print_col_state
        print_serdes_footer
}

function print_serdes_settings {
        if [ ! -e ${LGRP_PATH} ] ; then
                return
        fi

        print_serdes_header
        print_col_state
        print_col_eye_high
        print_col_eye_low
        printf "  settings |"
        print_col1 "settings/pre1" "pre1"
        print_col "settings/pre2" "pre2"
        print_col "settings/pre3" "pre3"
        print_col "settings/cursor" "cursor"
        print_col "settings/post1" "post1"
        print_col "settings/post2" "post2"
        print_col "settings/width" "width"
        print_col "settings/dfe" "dfe"
        print_col "settings/encoding" "encoding"
        print_col "settings/link_training" "link_train"
        print_col "settings/media" "media"
        print_col "settings/osr" "osr"
        print_col "settings/scramble" "scramble"
        print_col "settings/clocking" "clocking"
        print_serdes_footer
}

## ==================== MAIN ====================

case $option in
        state )
                if [ ${num_args} -ge 1 ] ; then
                        print_ldev
                fi
                if [ ${num_args} -ge 2 ] ; then
                        print_jack_state
                fi
                if [ ${num_args} -ge 3 ] ; then
                        print_link_state
                        print_mac_state
                        print_llr_state
                fi
                if [ ${num_args} -ge 2 ] ; then
                        print_lane_state
                fi
                exit
                ;;
        cable )
                if [ ${num_args} -ge 2 ] ; then
                        print_ldev
                        print_jack
		fi
		;;
        counters )
                if [ ${num_args} -ge 3 ] ; then
                        print_ldev
                        print_jack_state
                        print_link_state
                        print_mac_state
                        print_llr_state
                        print_counters
                fi
                exit
                ;;
        * )
                if [ ${num_args} -ge 1 ] ; then
                        print_ldev
                fi
                if [ ${num_args} -ge 2 ] ; then
                        print_jack
                        print_lgrp
                fi
                if [ ${num_args} -ge 3 ] ; then
                        print_link
                        print_mac
                        print_llr 
                        print_counters
                        print_serdes_settings
                        print_fec
                        print_fec_current
                fi
                exit
                ;;
esac
